/*
 * =============================================================================
 * THEME.CSS - DaisyUI ‚Üî Shadcn CSS Variable Bridge
 * =============================================================================
 * 
 * PURPOSE:
 * This file serves as the dynamic bridge between DaisyUI design tokens and 
 * Shadcn CSS variables, enabling theme switching while providing fallback values.
 * 
 * CSS CASCADE POSITION:
 * 1. ‚úÖ IMPORTED FIRST by globals.css
 * 2. ‚¨áÔ∏è  Then Tailwind @base layer applies hardcoded fallbacks
 * 3. ‚¨áÔ∏è  Then Tailwind @components and @utilities
 * 
 * WHAT THIS FILE DOES:
 * - Maps DaisyUI variables (--p, --b1, --bc) to Shadcn names (--primary, --background, --foreground)
 * - Provides fallback values when DaisyUI variables are missing: hsl(var(--b2, 0 0% 90%))
 * - Handles light/dark mode switching via .dark selector
 * - Prevents black borders by ensuring --border always has a value
 * 
 * WHAT THIS FILE SHOULD NOT CONTAIN:
 * ‚ùå Tailwind directives (@tailwind, @apply)
 * ‚ùå Hardcoded final fallback values (those go in globals.css)
 * ‚ùå Base element styles (*, body, etc.)
 * ‚ùå Component-specific styles
 * 
 * VARIABLE NAMING CONVENTION:
 * - Use Shadcn naming: --primary, --background, --border, --muted
 * - NOT DaisyUI naming: --p, --b1, --bc (those are source tokens)
 * 
 * FALLBACK STRATEGY:
 * - Always provide fallback: hsl(var(--source-token, fallback-value))
 * - Fallback values should be reasonable defaults for the semantic meaning
 * - Light mode fallbacks: bright backgrounds (90%+), dark text (10%-)
 * - Dark mode fallbacks: dark backgrounds (15%-), light text (85%+)
 * 
 * CONFLICT PREVENTION:
 * üö® NEVER override variables defined in globals.css @layer base
 * üö® NEVER use @layer directives here (conflicts with Tailwind)
 * üö® NEVER define variables without fallbacks
 * ‚úÖ Always test both with and without DaisyUI loaded
 * ‚úÖ Variables here should be DYNAMIC, globals.css should be STATIC
 * 
 * =============================================================================
 */

:root {
  /* DaisyUI HSL tokens ‚Üí Shadcn variables with fallbacks */
  /* Base colors */
  --primary: hsl(var(--p, 220 100% 50%));
  --primary-foreground: hsl(var(--pc, 0 0% 100%));

  --secondary: hsl(var(--s, 210 40% 96%));
  --secondary-foreground: hsl(var(--sc, 0 0% 9%));

  --accent: hsl(var(--a, 210 40% 96%));
  --accent-foreground: hsl(var(--ac, 0 0% 9%));

  --destructive: hsl(var(--er, 0 84% 60%));
  --destructive-foreground: hsl(var(--erc, 0 0% 98%));

  /* UI elements with fallbacks */
  --background: hsl(var(--b1, 0 0% 100%));
  --foreground: hsl(var(--bc, 0 0% 4%));
  --card: hsl(var(--b1, 0 0% 100%));
  --card-foreground: hsl(var(--bc, 0 0% 4%));
  --popover: hsl(var(--b1, 0 0% 100%));
  --popover-foreground: hsl(var(--bc, 0 0% 4%));

  /* Borders and inputs with fallbacks - using direct HSL values to prevent black borders */
  --border: hsl(var(--b2, 0 0% 90%));
  --input: hsl(var(--b2, 0 0% 90%));
  --ring: hsl(var(--p, 220 100% 50%));

  /* Muted colors with fallbacks */
  --muted: hsl(var(--b2, 0 0% 96%));
  --muted-foreground: hsl(var(--bc, 0 0% 45%));

  /* Status colors with fallbacks */
  --success: hsl(var(--su, 142 76% 36%));
  --success-foreground: hsl(var(--suc, 0 0% 98%));
  --warning: hsl(var(--wa, 43 96% 56%));
  --warning-foreground: hsl(var(--wac, 0 0% 9%));
  --info: hsl(var(--in, 198 93% 60%));
  --info-foreground: hsl(var(--inc, 0 0% 98%));

  /* Shadows */
  --radius: 0.5rem;
  --shadow-color: 220 3% 15%;
  --shadow-strength: 1%;
  --shadow-sm: 0 1px 2px 0
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --shadow:
    0 1px 3px 0 hsl(var(--shadow-color) / calc(var(--shadow-strength) + 10%)),
    0 1px 2px -1px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --shadow-md:
    0 4px 6px -1px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%)),
    0 2px 4px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --shadow-lg:
    0 10px 15px -3px
      hsl(var(--shadow-color) / calc(var(--shadow-strength) + 8%)),
    0 4px 6px -4px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 8%));
}

.dark {
  /* DaisyUI HSL tokens ‚Üí Shadcn variables for dark mode with fallbacks */
  /* Base colors */
  --primary: hsl(var(--p, 220 100% 50%));
  --primary-foreground: hsl(var(--pc, 0 0% 9%));

  --secondary: hsl(var(--s, 215 28% 17%));
  --secondary-foreground: hsl(var(--sc, 0 0% 98%));

  --accent: hsl(var(--a, 215 28% 17%));
  --accent-foreground: hsl(var(--ac, 0 0% 98%));

  --destructive: hsl(var(--er, 0 63% 31%));
  --destructive-foreground: hsl(var(--erc, 0 0% 98%));

  /* UI elements with fallbacks */
  --background: hsl(var(--n, 0 0% 4%));
  --foreground: hsl(var(--nc, 0 0% 98%));
  --card: hsl(var(--n, 0 0% 4%));
  --card-foreground: hsl(var(--nc, 0 0% 98%));
  --popover: hsl(var(--n, 0 0% 4%));
  --popover-foreground: hsl(var(--nc, 0 0% 98%));

  /* Borders and inputs with fallbacks - using direct HSL values to prevent black borders */
  --border: hsl(var(--b3, 0 0% 15%));
  --input: hsl(var(--b3, 0 0% 15%));
  --ring: hsl(var(--p, 220 100% 50%));

  /* Muted colors with fallbacks */
  --muted: hsl(var(--b3, 0 0% 15%));
  --muted-foreground: hsl(var(--nc, 0 0% 65%));

  /* Status colors with fallbacks */
  --success: hsl(var(--su, 142 76% 36%));
  --success-foreground: hsl(var(--suc, 0 0% 98%));
  --warning: hsl(var(--wa, 43 96% 56%));
  --warning-foreground: hsl(var(--wac, 0 0% 9%));
  --info: hsl(var(--in, 198 93% 60%));
  --info-foreground: hsl(var(--inc, 0 0% 98%));

  /* Shadows - darker for dark mode */
  --shadow-color: 220 40% 2%;
  --shadow-strength: 4%;
}
